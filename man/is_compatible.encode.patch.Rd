% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/encode.patch.R
\name{is_compatible.encode.patch}
\alias{is_compatible.encode.patch}
\title{Test for compatibility between patch and data frame.}
\usage{
\method{is_compatible}{encode.patch}(obj, df, strict = TRUE, ...)
}
\arguments{
\item{obj}{A \code{patch} object.}

\item{df}{A data frame.}

\item{strict}{A logical flag used to specify whether the encoding in the patch \code{params} object must include all of the values in the relevant columns (\code{strict = TRUE}), or merely at least one of those values (\code{strict = FALSE}). The default value is \code{TRUE}}

\item{...}{Any additional arguments are ignored.}
}
\description{
Implements the generic function \code{is_compatible} for a \code{patch} of type \code{encode.patch}. Returns \code{TRUE} if the given patch and data frame are compatible, in the sense that the patch (function) may be applied to the data frame without generating an error.

The \code{patch} is deemed compatible if both:
\itemize{
 \item the maximum integer in the \code{datadiff:::COLUMNS} element of its \code{params} object does not exceed the number of columns in the data frame, and
 \item after coersion to type \code{character}, all of the values (or at least one of them, if \code{strict = FALSE}) in each of the relevant columns of the data frame are contained in the set of element names in the \code{datadiff:::ENCODING} element of the \code{params} object.
}
}
\examples{
# Columns 8 and 9 of mtcars contain binary data.
p <- patch(encode_patch_params(c(8L, 9L), c("0" = FALSE, "1" = TRUE)))
is_compatible(p, mtcars)
# Other columns do not.
p <- patch(encode_patch_params(c(1L, 3L, 4L), c("0" = FALSE, "1" = TRUE)))
is_compatible(p, mtcars)

# Encodings must be provided for all elements, unless strict = FALSE.
p <- patch(encode_patch_params(c(8L, 9L), c("0" = FALSE)))
is_compatible(p, mtcars)
is_compatible(p, mtcars, strict = FALSE)

}
