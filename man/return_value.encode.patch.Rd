% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/encode.patch.R
\name{return_value.encode.patch}
\alias{return_value.encode.patch}
\title{Generate the patch return value.}
\usage{
\method{return_value}{encode.patch}(obj, df, strict = TRUE,
  convert_type = TRUE, ...)
}
\arguments{
\item{obj}{A \code{patch} object.}

\item{df}{A data frame.}

\item{strict}{A logical flag explained in the \code{\link{is_compatible.encode.patch}}
method. If \code{strict} is \code{FALSE} and \code{NA} value(s) are
introduced as a consequence, then a warning is generated.}

\item{convert_type}{A logical flag. If \code{TRUE} (the default) then the \code{type.convert}
function is used to convert the type of the encoding factor elements. If
\code{FALSE} all re-encoded columns will have type \code{character}.}

\item{...}{Any additional arguments are ignored.}
}
\value{
A patched data frame.
}
\description{
Implements the generic function \code{return_value} for a \code{patch} of
type \code{encode.patch}. Returns the data frame resulting from the
application of the \code{patch} to the given data frame.

In the case of an \emph{encode.patch} this is the given data frame after a
re-encoding of the categorical data contained in those columns specified in
the \code{params}, according to the specified encoding.

Columns in the given data frame of type \code{factor} will also have type
\code{factor} in the return value.
}
\examples{
purrr::map_chr(mtcars, class)
p <- patch(encode_patch_params(c(8L, 9L), c("0" = FALSE, "1" = TRUE)))
purrr::map_chr(return_value(p, mtcars), class)

}
\seealso{
\code{\link{type.convert}}
}
